# Runtime configuration for WDW Tables
api:
  image:
    registry: docker.vosswerks.xyz
    repository: "wdw-tables/server"
    tag: 2.0.13
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 3000
  replicaCount: 1
  resources: {}

  dbAddr: postgres
  redisAddr: redis
  redisPort: 6379
  redisDb: 0
  stripeKey:
  tokenKeyPrivate:
  tokenKeyPublic:
  firebaseServiceAccountJson:
  firebaseDatabaseUrl:
  saltKey:
  serviceUrl:

  persistence:
    data:
      enabled: false
      size: 8Gi
      #type: custom
      #volumeSpec:
      #  nfs:
      #    server: 10.100.0.1
      #    path: /srv/nfsv4/wdwtables/data

messaging:
  image:
    registry: docker.vosswerks.xyz
    repository: "wdw-tables/messaging"
    tag: 2.0.3
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 3001
  replicaCount: 1
  resources: {}

  #mailDomain: domain.com
  #mailApikey: key
  #plivoAuthid: plivoauthid
  #plivoAuthtoken: plivotoken
  #plivoSrc: "phone number"
  #emailFrom: something
  #emailFromAddress: notification@domain.com
  #firebaseServiceAccountJson: /data/key.json
  #firebaseDatabaseUrl: https://somethinggoeshere.firebaseio.com
  #httpPort: 3001
  #baseUri: https://messaging.domain.com
  #assetsUrl: https://assets.domain.com

  persistence:
    data:
      enabled: false
      size: 8Gi
      #type: custom
      #volumeSpec:
      #  nfs:
      #    server: 10.100.0.1
      #    path: /srv/nfsv4/wdwtables/data

uids:
  image:
    registry: docker.vosswerks.xyz
    repository: "wdw-tables/uids"
    tag: 2.0.6
    pullPolicy: IfNotPresent
  replicaCount: 1
  resources: {}

  limit: 10
  delay: 60

crawlerServer:
  image:
    registry: docker.vosswerks.xyz
    repository: "wdw-tables/crawler-server"
    tag: 2.0.10
    pullPolicy: IfNotPresent
  replicaCount: 1
  resources: {}

  freeLimit: 30
  cron: '00 25 08 * * *'

freeCrawler:
  image:
    registry: docker.vosswerks.xyz
    repository: "wdw-tables/crawler"
    tag: 1.2.5
    pullPolicy: IfNotPresent
  replicaCount: 1
  resources: {}

  proxyEnabled: true
  numberToRequest: 10
  beginTime: 5000
  endTime: 10000
  searchType: free
  requestTimeout: 29000
  rateLimit: 10
  retries: 0
  numClients: 2
  debug: false

paidCrawler:
  image:
    registry: docker.vosswerks.xyz
    repository: "wdw-tables/crawler"
    tag: 1.2.5
    pullPolicy: IfNotPresent
  replicaCount: 2
  resources: {}

  proxyEnabled: true
  numberToRequest: 20
  beginTime: 5000
  endTime: 10000
  searchType: paid
  requestTimeout: 29000
  rateLimit: 10
  retries: 0
  numClients: 5
  debug: false

postgresBackup:
  b2AccountId: b2accountid
  b2AccountKey: b2keygoeshere
  resticRepository: b2:bucketgoeshere
  resticPassword: resticpasswordgoeshere

# PostgreSQL Database Configuration
postgresql:
  # Whether to deploy the stable/postgresql chart with this chart. If disabled, make sure PostgreSQL is available at the hostname below and credentials are configured below
  enabled: true

  #postgresqlDatabase: wdwtables
  #postgresqlUsername: wdwtables
  #postgresqlPassword: ej8dc69lmkdo
  servicePort: 5432

  initdbScriptsConfigMap: "{{ .Release.Name }}-postgresql-initdb"

  persistence:
    ## @param persistence.enabled Enable persistence using PVC
    ##
    enabled: false
    ## @param persistence.existingClaim Provide an existing `PersistentVolumeClaim`, the value is evaluated as a template.
    ## If defined, PVC must be created manually before volume will be bound
    ## The value is evaluated as a template, so, for example, the name can depend on .Release or .Chart
    ##
    existingClaim: ""
    ## @param persistence.mountPath The path the volume will be mounted at, useful when using different
    ## PostgreSQL images.
    ##
    mountPath: /bitnami/postgresql
    ## @param persistence.subPath The subdirectory of the volume to mount to
    ## Useful in dev environments and one PV for multiple services
    ##
    subPath: ""
    ## @param persistence.storageClass PVC Storage Class for PostgreSQL volume
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    storageClass: ""
    ## @param persistence.accessModes PVC Access Mode for PostgreSQL volume
    ##
    accessModes:
      - ReadWriteOnce
    ## @param persistence.snapshotName Provide a VolumeSnapshot name which to create the PVC
    ## The same snapshot will be used for the primary and any read replicas
    ## ref: https://kubernetes.io/docs/concepts/storage/volume-snapshots/
    ##
    snapshotName: ""
    ## @param persistence.size PVC Storage Request for PostgreSQL volume
    ##
    size: 8Gi
    ## @param persistence.annotations Annotations for the PVC
    ##
    annotations: {}
    ## @param persistence.selector Selector to match an existing Persistent Volume (this value is evaluated as a template)
    ## selector:
    ##   matchLabels:
    ##     app: my-app
    ##
    selector: {}

  securityContext:
    enabled: false
    runAsUser: 1001
    fsGroup: 1001

redis:
  # Whether to deploy the stable/postgresql chart with this chart. If disabled, make sure PostgreSQL is available at the hostname below and credentials are configured below
  enabled: true

  architecture: standalone

  auth:
    ## @param auth.enabled Enable password authentication
    ##
    enabled: false
    ## @param auth.sentinel Enable password authentication on sentinels too
    ##
    sentinel: false
    ## @param auth.password Redis&trade; password
    ## Defaults to a random 10-character alphanumeric string if not set
    ##
    password: ""
    ## @param auth.existingSecret The name of an existing secret with Redis&trade; credentials
    ## NOTE: When it's set, the previous `auth.password` parameter is ignored
    ##
    existingSecret: ""
    ## @param auth.existingSecretPasswordKey Password key to be retrieved from existing secret
    ## NOTE: ignored unless `auth.existingSecret` parameter is set
    ##
    existingSecretPasswordKey: ""
    ## @param auth.usePasswordFiles Mount credentials as files instead of using an environment variable
    ##
    usePasswordFiles: false

  replica:
    ## @param replica.replicaCount Number of Redis&trade; replicas to deploy
    ##
    replicaCount: 0

  master:
    persistence:
      ## @param master.persistence.enabled Enable persistence on Redis&trade; master nodes using Persistent Volume Claims
      ##
      enabled: false
      ## @param master.persistence.medium Provide a medium for `emptyDir` volumes.
      ##
      medium: ""
      ## @param master.persistence.path The path the volume will be mounted at on Redis&trade; master containers
      ## NOTE: Useful when using different Redis&trade; images
      ##
      path: /data
      ## @param master.persistence.subPath The subdirectory of the volume to mount on Redis&trade; master containers
      ## NOTE: Useful in dev environments
      ##
      subPath: ""
      ## @param master.persistence.storageClass Persistent Volume storage class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is set, choosing the default provisioner
      ##
      storageClass: ""
      ## @param master.persistence.accessModes Persistent Volume access modes
      ##
      accessModes:
        - ReadWriteOnce
      ## @param master.persistence.size Persistent Volume size
      ##
      size: 8Gi
      ## @param master.persistence.annotations Additional custom annotations for the PVC
      ##
      annotations: {}
      ## @param master.persistence.selector Additional labels to match for the PVC
      ## e.g:
      ## selector:
      ##   matchLabels:
      ##     app: my-app
      ##
      selector: {}
      ## @param master.persistence.dataSource Custom PVC data source
      dataSource: {}
      ## @param master.persistence.existingClaim Use a existing PVC which must be created manually before bound
      ## NOTE: requires master.persistence.enabled: true
      ##
      existingClaim: ""
  service:
    ## @param master.service.type Redis&trade; master service type
    ##
    type: ClusterIP
    ## @param master.service.port Redis&trade; master service port
    ##
    port: 6379
    ## @param master.service.nodePort Node port for Redis&trade; master
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    ## NOTE: choose port between <30000-32767>
    ##
    nodePort: ""
    ## @param master.service.externalTrafficPolicy Redis&trade; master service external traffic policy
    ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
    ##
    externalTrafficPolicy: Cluster
    ## @param master.service.clusterIP Redis&trade; master service Cluster IP
    ##
    clusterIP: ""
    ## @param master.service.loadBalancerIP Redis&trade; master service Load Balancer IP
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
    ##
    loadBalancerIP: ""
    ## @param master.service.loadBalancerSourceRanges Redis&trade; master service Load Balancer sources
    ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
    ## e.g.
    ## loadBalancerSourceRanges:
    ##   - 10.10.10.0/24
    ##
    loadBalancerSourceRanges: []
    ## @param master.service.annotations Additional custom annotations for Redis&trade; master service
    ##
    annotations: {}

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

networkPolicies:
  enabled: true